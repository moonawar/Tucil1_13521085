if ((float)((a + b) + (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) + (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) + c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) + %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b + c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d + %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b + c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d + %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b + (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d + (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + b) + (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) + (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) + c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) + %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b + c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d + %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b + c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d + %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b + (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d + (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + b) + (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) + (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) + c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) + %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b + c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d + %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b + c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d + %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b + (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d + (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a + b) + (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) + (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a + b) + c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) + %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a + (b + c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d + %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a + ((b + c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d + %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a + (b + (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d + (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((float)((a + b) - (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) - (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) - c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) - %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b - c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d - %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b - c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d - %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b - (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d - (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + b) - (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) - (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) - c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) - %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b - c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d - %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b - c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d - %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b - (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d - (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + b) - (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) - (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) - c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) - %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b - c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d - %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b - c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d - %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b - (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d - (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a + b) - (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) - (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a + b) - c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) - %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a + (b - c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d - %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a + ((b - c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d - %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a + (b - (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d - (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((float)((a + b) * (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) * (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) * c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) * %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b * c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d * %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b * c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d * %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b * (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d * (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + b) * (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) * (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) * c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) * %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b * c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d * %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b * c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d * %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b * (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d * (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + b) * (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) * (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a + b) * c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) * %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a + (b * c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d * %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + ((b * c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d * %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a + (b * (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d * (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a + b) * (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) * (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a + b) * c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) * %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a + (b * c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d * %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a + ((b * c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d * %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a + (b * (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d * (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c + d != 0) {
if ((float)((a + b) / (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) / (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a + b) / c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) / %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a + (b / c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d / %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a + ((b / c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d / %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c + d) != 0) {
if ((float)(a + (b / (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d / (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c - d != 0) {
if ((float)((a + b) / (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) / (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a + b) / c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) / %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a + (b / c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d / %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a + ((b / c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d / %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c - d) != 0) {
if ((float)(a + (b / (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d / (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c * d != 0) {
if ((float)((a + b) / (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) / (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a + b) / c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) / %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a + (b / c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d / %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a + ((b / c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d / %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c * d) != 0) {
if ((float)(a + (b / (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d / (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if (c / d != 0) {
if ((float)((a + b) / (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d + %d) / (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)(((a + b) / c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d + %d) / %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)((a + (b / c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d + (%d / %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)(a + ((b / c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d + ((%d / %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if ((c / d) != 0) {
if ((float)(a + (b / (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d + (%d / (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if ((float)((a - b) + (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) + (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) + c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) + %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b + c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d + %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b + c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d + %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b + (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d + (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - b) + (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) + (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) + c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) + %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b + c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d + %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b + c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d + %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b + (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d + (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - b) + (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) + (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) + c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) + %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b + c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d + %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b + c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d + %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b + (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d + (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a - b) + (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) + (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a - b) + c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) + %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a - (b + c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d + %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a - ((b + c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d + %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a - (b + (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d + (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((float)((a - b) - (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) - (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) - c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) - %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b - c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d - %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b - c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d - %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b - (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d - (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - b) - (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) - (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) - c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) - %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b - c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d - %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b - c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d - %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b - (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d - (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - b) - (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) - (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) - c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) - %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b - c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d - %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b - c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d - %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b - (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d - (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a - b) - (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) - (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a - b) - c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) - %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a - (b - c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d - %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a - ((b - c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d - %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a - (b - (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d - (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((float)((a - b) * (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) * (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) * c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) * %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b * c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d * %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b * c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d * %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b * (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d * (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - b) * (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) * (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) * c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) * %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b * c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d * %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b * c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d * %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b * (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d * (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - b) * (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) * (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a - b) * c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) * %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a - (b * c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d * %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - ((b * c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d * %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a - (b * (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d * (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a - b) * (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) * (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a - b) * c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) * %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a - (b * c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d * %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a - ((b * c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d * %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a - (b * (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d * (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c + d != 0) {
if ((float)((a - b) / (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) / (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a - b) / c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) / %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a - (b / c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d / %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a - ((b / c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d / %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c + d) != 0) {
if ((float)(a - (b / (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d / (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c - d != 0) {
if ((float)((a - b) / (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) / (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a - b) / c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) / %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a - (b / c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d / %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a - ((b / c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d / %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c - d) != 0) {
if ((float)(a - (b / (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d / (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c * d != 0) {
if ((float)((a - b) / (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) / (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a - b) / c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) / %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a - (b / c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d / %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a - ((b / c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d / %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c * d) != 0) {
if ((float)(a - (b / (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d / (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if (c / d != 0) {
if ((float)((a - b) / (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d - %d) / (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)(((a - b) / c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d - %d) / %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)((a - (b / c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d - (%d / %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)(a - ((b / c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d - ((%d / %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if ((c / d) != 0) {
if ((float)(a - (b / (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d - (%d / (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if ((float)((a * b) + (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) + (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) + c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) + %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b + c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d + %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b + c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d + %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b + (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d + (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * b) + (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) + (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) + c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) + %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b + c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d + %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b + c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d + %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b + (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d + (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * b) + (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) + (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) + c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) + %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b + c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d + %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b + c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d + %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b + (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d + (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a * b) + (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) + (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a * b) + c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) + %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a * (b + c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d + %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a * ((b + c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d + %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a * (b + (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d + (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((float)((a * b) - (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) - (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) - c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) - %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b - c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d - %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b - c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d - %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b - (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d - (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * b) - (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) - (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) - c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) - %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b - c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d - %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b - c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d - %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b - (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d - (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * b) - (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) - (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) - c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) - %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b - c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d - %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b - c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d - %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b - (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d - (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a * b) - (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) - (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a * b) - c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) - %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a * (b - c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d - %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a * ((b - c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d - %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a * (b - (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d - (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((float)((a * b) * (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) * (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) * c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) * %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b * c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d * %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b * c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d * %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b * (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d * (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * b) * (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) * (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) * c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) * %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b * c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d * %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b * c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d * %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b * (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d * (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * b) * (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) * (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(((a * b) * c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) * %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)((a * (b * c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d * %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * ((b * c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d * %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if ((float)(a * (b * (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d * (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
if (d != 0) {
if ((float)((a * b) * (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) * (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(((a * b) * c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) * %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)((a * (b * c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d * %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a * ((b * c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d * %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if ((float)(a * (b * (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d * (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c + d != 0) {
if ((float)((a * b) / (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) / (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a * b) / c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) / %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a * (b / c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d / %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a * ((b / c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d / %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c + d) != 0) {
if ((float)(a * (b / (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d / (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c - d != 0) {
if ((float)((a * b) / (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) / (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a * b) / c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) / %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a * (b / c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d / %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a * ((b / c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d / %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c - d) != 0) {
if ((float)(a * (b / (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d / (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c * d != 0) {
if ((float)((a * b) / (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) / (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(((a * b) / c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) / %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)((a * (b / c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d / %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (c != 0) {
if ((float)(a * ((b / c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d / %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((c * d) != 0) {
if ((float)(a * (b / (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d / (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (d != 0) {
if (c / d != 0) {
if ((float)((a * b) / (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d * %d) / (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)(((a * b) / c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d * %d) / %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)((a * (b / c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d * (%d / %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((float)(a * ((b / c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d * ((%d / %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if ((c / d) != 0) {
if ((float)(a * (b / (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d * (%d / (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if ((float)((a / b) + (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) + (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) + c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) + %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b + c != 0) {
if ((float)((a / (b + c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d + %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b + c) + d != 0) {
if ((float)(a / ((b + c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d + %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b + (c + d) != 0) {
if ((float)(a / (b + (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d + (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)((a / b) + (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) + (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) + c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) + %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b + c != 0) {
if ((float)((a / (b + c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d + %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b + c) - d != 0) {
if ((float)(a / ((b + c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d + %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b + (c - d) != 0) {
if ((float)(a / (b + (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d + (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)((a / b) + (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) + (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) + c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) + %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b + c != 0) {
if ((float)((a / (b + c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d + %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b + c) * d != 0) {
if ((float)(a / ((b + c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d + %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b + (c * d) != 0) {
if ((float)(a / (b + (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d + (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if (d != 0) {
if ((float)((a / b) + (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) + (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (d != 0) {
if ((float)(((a / b) + c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) + %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b + c != 0) {
if (d != 0) {
if ((float)((a / (b + c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d + %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if ((b + c) / d != 0) {
if ((float)(a / ((b + c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d + %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if (b + (c / d) != 0) {
if ((float)(a / (b + (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d + (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if ((float)((a / b) - (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) - (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) - c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) - %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b - c != 0) {
if ((float)((a / (b - c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d - %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b - c) + d != 0) {
if ((float)(a / ((b - c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d - %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b - (c + d) != 0) {
if ((float)(a / (b - (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d - (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)((a / b) - (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) - (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) - c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) - %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b - c != 0) {
if ((float)((a / (b - c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d - %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b - c) - d != 0) {
if ((float)(a / ((b - c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d - %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b - (c - d) != 0) {
if ((float)(a / (b - (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d - (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)((a / b) - (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) - (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) - c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) - %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b - c != 0) {
if ((float)((a / (b - c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d - %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b - c) * d != 0) {
if ((float)(a / ((b - c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d - %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b - (c * d) != 0) {
if ((float)(a / (b - (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d - (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if (d != 0) {
if ((float)((a / b) - (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) - (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (d != 0) {
if ((float)(((a / b) - c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) - %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b - c != 0) {
if (d != 0) {
if ((float)((a / (b - c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d - %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if ((b - c) / d != 0) {
if ((float)(a / ((b - c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d - %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if (b - (c / d) != 0) {
if ((float)(a / (b - (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d - (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if ((float)((a / b) * (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) * (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) * c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) * %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b * c != 0) {
if ((float)((a / (b * c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d * %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b * c) + d != 0) {
if ((float)(a / ((b * c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d * %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b * (c + d) != 0) {
if ((float)(a / (b * (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d * (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)((a / b) * (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) * (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) * c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) * %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b * c != 0) {
if ((float)((a / (b * c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d * %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b * c) - d != 0) {
if ((float)(a / ((b * c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d * %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b * (c - d) != 0) {
if ((float)(a / (b * (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d * (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)((a / b) * (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) * (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if ((float)(((a / b) * c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) * %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b * c != 0) {
if ((float)((a / (b * c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d * %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if ((b * c) * d != 0) {
if ((float)(a / ((b * c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d * %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b * (c * d) != 0) {
if ((float)(a / (b * (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d * (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
if (b != 0) {
if (d != 0) {
if ((float)((a / b) * (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) * (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (d != 0) {
if ((float)(((a / b) * c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) * %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b * c != 0) {
if (d != 0) {
if ((float)((a / (b * c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d * %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if ((b * c) / d != 0) {
if ((float)(a / ((b * c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d * %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (d != 0) {
if (b * (c / d) != 0) {
if ((float)(a / (b * (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d * (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (c + d != 0) {
if ((float)((a / b) / (c + d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) / (%d + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (c != 0) {
if ((float)(((a / b) / c) + d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) / %d) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (b / c != 0) {
if ((float)((a / (b / c)) + d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d / %d)) + %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if ((b / c) + d != 0) {
if ((float)(a / ((b / c) + d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d / %d) + %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if ((c + d) != 0) {
if (b / (c + d) != 0) {
if ((float)(a / (b / (c + d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d / (%d + %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (c - d != 0) {
if ((float)((a / b) / (c - d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) / (%d - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (c != 0) {
if ((float)(((a / b) / c) - d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) / %d) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (b / c != 0) {
if ((float)((a / (b / c)) - d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d / %d)) - %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if ((b / c) - d != 0) {
if ((float)(a / ((b / c) - d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d / %d) - %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if ((c - d) != 0) {
if (b / (c - d) != 0) {
if ((float)(a / (b / (c - d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d / (%d - %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (c * d != 0) {
if ((float)((a / b) / (c * d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) / (%d * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (c != 0) {
if ((float)(((a / b) / c) * d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) / %d) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if (b / c != 0) {
if ((float)((a / (b / c)) * d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d / %d)) * %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (c != 0) {
if ((b / c) * d != 0) {
if ((float)(a / ((b / c) * d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d / %d) * %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if ((c * d) != 0) {
if (b / (c * d) != 0) {
if ((float)(a / (b / (c * d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d / (%d * %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
if (b != 0) {
if (d != 0) {
if (c / d != 0) {
if ((float)((a / b) / (c / d)) == (float)RESULT) {
    sprintf(sol_char, "(%d / %d) / (%d / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
}
if (b != 0) {
if (c != 0) {
if (d != 0) {
if ((float)(((a / b) / c) / d) == (float)RESULT) {
    sprintf(sol_char, "((%d / %d) / %d) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
}
if (c != 0) {
if (b / c != 0) {
if (d != 0) {
if ((float)((a / (b / c)) / d) == (float)RESULT) {
    sprintf(sol_char, "(%d / (%d / %d)) / %d", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
}
if (c != 0) {
if (d != 0) {
if ((b / c) / d != 0) {
if ((float)(a / ((b / c) / d)) == (float)RESULT) {
    sprintf(sol_char, "%d / ((%d / %d) / %d)", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
}
if (d != 0) {
if ((c / d) != 0) {
if (b / (c / d) != 0) {
if ((float)(a / (b / (c / d))) == (float)RESULT) {
    sprintf(sol_char, "%d / (%d / (%d / %d))", (int)a, (int)b, (int)c, (int)d);
    sol_str.assign(sol_char);
    if (!isMember(solutions, sol_str)){
    solutions.push_back(sol_str);
}
}
}
}
}
